generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  downloads     Int       @default(0)
  uploads       Int       @default(0)
  Account       Account[]
  files         File[]    @relation("UserFiles")
  folders       Folder[]  @relation("UserFolders")
  Session       Session[]
}

model Folder {
  id         String   @id @default(cuid())
  name       String
  ownerId    String
  parentId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  files      File[]
  owner      User     @relation("UserFolders", fields: [ownerId], references: [id])
  parent     Folder?  @relation("ParentFolder", fields: [parentId], references: [id])
  subfolders Folder[] @relation("ParentFolder")
}

model File {
  id        String   @id @default(cuid())
  name      String
  type      String
  size      Int
  ownerId   String
  folderId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  folder    Folder?  @relation(fields: [folderId], references: [id])
  owner     User     @relation("UserFiles", fields: [ownerId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  id                String  @id
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  id           String   @id
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Subscription {
  id        String    @id
  name      String
  deadline  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  userId    String    @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
